@using HomeSimulator.Services;
@inject MyContext _myContext;
@inject OCPPSocketBackgroundService _ocppSocketBackgroundService;
@{
    Layout = null;
    ViewData["Title"] = "Overview";
    ViewBag.MenuName = "index";
    var a = _myContext.Meters.OrderBy(o => o.Id).FirstOrDefault(o => o.Name == "A");
    var b = _myContext.Meters.OrderBy(o => o.Id).FirstOrDefault(o => o.Name == "B");
    var c = _myContext.Meters.OrderBy(o => o.Id).FirstOrDefault(o => o.Name == "C");
    var loads = _myContext.Loads.ToList();
    var charger = _myContext.Chargers.FirstOrDefault()??new Charger();
}

<h4>Meter (@a.LastUpdateTime)</h4>
<table class="table">
    <thead>
        <tr>
            <th scope="col">Data</th>
            <th scope="col">A(Solar)</th>
            <th scope="col">B(Grid)</th>
            <th scope="col">C(Load[To Meter])</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th scope="row">Voltage</th>
            <td>@a.Voltage.ToDecimalString(1) V</td>
            <td>@b.Voltage.ToDecimalString(1) V</td>
            <td>@c.Voltage.ToDecimalString(1) V</td>
        </tr>
        <tr>
            <th scope="row">Current</th>
            <td>@a.Current.ToDecimalString(1) A</td>
            <td>@b.Current.ToDecimalString(1) A</td>
            <td>@c.Current.ToDecimalString(1) A</td>
        </tr>
        <tr>
            <th scope="row">Power</th>
            <td>@a.Power.ToDecimalString(1) W</td>
            <td>@b.Power.ToDecimalString(1) W</td>
            <td>@c.Power.ToDecimalString(1) W</td>
        </tr>
        <tr>
            <th scope="row">Energy</th>
            <td>@a.Energy.ToDecimalString() kWh</td>
            <td>@b.Energy.ToDecimalString() kWh</td>
            <td>@c.Energy.ToDecimalString() kWh</td>
        </tr>
        <tr>
            <th scope="row">Reverse Energy</th>
            <td>@a.ReverseEnergy.ToDecimalString() kWh</td>
            <td>@b.ReverseEnergy.ToDecimalString() kWh</td>
            <td>@c.ReverseEnergy.ToDecimalString() kWh</td>
        </tr>
    </tbody>
</table>
<h4>
    Charger
</h4>
@if(_ocppSocketBackgroundService.IsConnected){
<table class="table table-bordered" style="background-color:#@(_ocppSocketBackgroundService.Charger.IsCharging?"edf8f4":"efefef")">
    <tr>
        <th >ID </th>
        <th >
            @if (_ocppSocketBackgroundService.Charger.LimitPower != null)
            {
                <span>Power Limit</span>
            }
            else
            {
                <span>Max Power</span>
            }
        </th>
        <td rowspan="2" align="center" valign="middle">
            @if (_ocppSocketBackgroundService.Charger.IsCharging == false)
            {
                <a href="#" class="btn btn-sm btn-primary" onclick="startTransaction()">Start Charging</a>
            }
            else
            {
                <a href="#" class="btn btn-sm btn-danger" onclick="stopTransaction()">Stop Charging</a>
            }
        </td>
        @if (_ocppSocketBackgroundService.Charger.IsCharging)
        {
            <th>Voltage</th>
            <th>Current</th>
            <th>Power</th>
            <th>Energy</th>
            <th>SOC</th>
            
        }
    </tr>
    <tr>
        <td>
            @charger.ChargePointId
        </td>
        <td>
            @(_ocppSocketBackgroundService.Charger.LimitPower == null ? _ocppSocketBackgroundService.Charger.MaxPower : _ocppSocketBackgroundService.Charger.LimitPower)
            W
        </td>
        @if (_ocppSocketBackgroundService.Charger.IsCharging)
        {
            <td>@_ocppSocketBackgroundService.Charger.Voltage.ToDecimalNum(0) V</td>
            <td>@_ocppSocketBackgroundService.Charger.Current.ToDecimalNum(1) A</td>
            <td>@_ocppSocketBackgroundService.Charger.Power.ToDecimalNum(0) W</td>
            <td>@((_ocppSocketBackgroundService.Charger.Energy/1000).ToDecimalNum(3)) kWh</td>
            <td>@_ocppSocketBackgroundService.Charger.SOC.ToDecimalNum() %</td>
        }
    </tr>
    </table>
}
else
{
    <p>
        Unable to connect to ocpp server, please check Settings.
    </p>
}
<h4>Loads</h4>
<div>
    @foreach (var load in loads)
    {
        <div class="card @(load.Status?"text-white bg-info":"light")"
        style="width: 200px;height:140px;clear:none;display:block;float:left;margin-right:20px;margin-bottom:20px;text-align:center">
            <div class="card-body">
                <h5 class="card-title">
                    @if (load.Status == true)
                    {
                        <span>@load.LastPower.ToDecimalString() W</span>
                    }
                    else
                    {
                        <span>&nbsp;</span>
                    }
                </h5>
                <p class="card-text">@load.Name</p>
                @if (load.RunMode == (int)RunModeEnums.Manual)
                {
                    if (load.Status == true)
                    {
                        <a href="#" class="btn btn-sm btn-primary" onclick="setStatus(@(load.Id),false)">Close</a>
                    }
                    else
                    {
                        <a href="#" class="btn btn-sm btn-primary" onclick="setStatus(@(load.Id),true)">Open</a>
                    }
                }
                else
                {
                    @* <div class="btn btn-sm btn-light">&nbsp;
                         @(load.Status?"Opened":"Closed") 
                    </div> *@
                }
            </div>
        </div>
    }
</div>
